name: Update CSVs and upload to R2

on:
  schedule:
    # 04:45 UTC = 12:45 AM ET (daylight); safe window after GA's 11:34 PM ET draw
    - cron: '45 4 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    environment:
      name: r2-prod
    env:
      # Your inputs (as before)
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID || vars.CF_ACCOUNT_ID }}
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      R2_BUCKET:     ${{ secrets.R2_BUCKET || vars.R2_BUCKET }}
      # Wrangler v4 reads these envs; we export them from CF_ in a step below
      CLOUDFLARE_ACCOUNT_ID: ""
      CLOUDFLARE_API_TOKEN:  ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required secrets/vars are present
        run: |
          [ -z "$CF_ACCOUNT_ID" ] && echo "CF_ACCOUNT_ID is MISSING" && exit 1 || echo "CF_ACCOUNT_ID is set"
          [ -z "$CF_API_TOKEN" ]  && echo "CF_API_TOKEN is MISSING"  && exit 1 || echo "CF_API_TOKEN is set"
          [ -z "$R2_BUCKET" ]     && echo "R2_BUCKET is MISSING"     && exit 1 || echo "R2_BUCKET is set"

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache scraper state (.cache)
        uses: actions/cache@v4
        with:
          path: .cache
          key: fantasy5-cache-${{ runner.os }}-${{ hashFiles('scripts/sources/fantasy5.mjs') }}
          restore-keys: |
            fantasy5-cache-${{ runner.os }}-

      - name: Install project dependencies
        run: npm ci

      - name: Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Install Wrangler v4 (pin)
        run: |
          npm i -D wrangler@4
          npx wrangler --version

      - name: Export Cloudflare env for Wrangler
        run: |
          echo "CLOUDFLARE_ACCOUNT_ID=$CF_ACCOUNT_ID" >> $GITHUB_ENV
          echo "CLOUDFLARE_API_TOKEN=$CF_API_TOKEN"   >> $GITHUB_ENV

      - name: Probe R2 and decide if we should seed full PB/MM history
        shell: bash
        run: |
          set -euo pipefail
          need_seed=0

   
          count_lines() {
            local key="$1"
            if npx --yes wrangler r2 object get "$R2_BUCKET/$key" --pipe --remote > /tmp/probe.csv 2>/dev/null; then
              wc -l < /tmp/probe.csv | tr -d ' '
            else
              echo 0
            fi
          }

          pb_lines=$(count_lines "multi/powerball.csv")
          mm_lines=$(count_lines "multi/megamillions.csv")

          echo "R2 probe: powerball.csv lines=$pb_lines ; megamillions.csv lines=$mm_lines"

    
          if [ "$pb_lines" -le 100 ] || [ "$mm_lines" -le 100 ]; then
           need_seed=1
          fi

          if [ "$need_seed" -eq 1 ]; then
           echo "LSP_SEED_FULL=1" >> "$GITHUB_ENV"
           echo "Seeding full history for PB/MM this run."
          else
            echo "No seed needed."
          fi

      - name: Run updater
        run: node scripts/update_csvs.mjs
        env:
          SOCRATA_APP_TOKEN: ${{ secrets.SOCRATA_APP_TOKEN }}
          SKIP_SOCRATA: '0'

      # =========== MERGE & GUARD ===========

      - name: Merge local CSV with existing R2 object (append-only)
        shell: bash
        run: |
          set -euo pipefail
          export LC_ALL=C LANG=C

          merge_csv() {
            local rel="$1"              # e.g. ga/cash4life.csv or multi/powerball.csv
            local local_file="public/data/$rel"

            sed -i 's/\r$//' "$local_file" 2>/dev/null || true

            local tmpdir r2_file merged
            tmpdir="$(mktemp -d)"
            r2_file="$tmpdir/r2.csv"
            merged="$tmpdir/merged.csv"

            if npx --yes wrangler r2 object get "$R2_BUCKET/$rel" --pipe --remote > "$r2_file" 2>/dev/null; then
              echo "Fetched existing $rel from R2"
            else
              echo "No existing $rel in R2; starting fresh"
              : > "$r2_file"
            fi

            # --- Canonical header ---
            local canon="draw_date,num1,num2,num3,num4,num5,special"

            # --- Read headers (strip CRLF) ---
            local header r2_header
            header="$(head -n1 "$local_file" | tr -d '\r')"
            r2_header="$( [ -s "$r2_file" ] && head -n1 "$r2_file" | tr -d '\r' || echo "$header" )"

            # --- Strip UTF-8 BOM if present ---
            local bom=$'\xEF\xBB\xBF'
            [[ "$r2_header" == "$bom"* ]] && r2_header="${r2_header#"$bom"}"

            # --- Normalize helper: lowercase + map special column names to 'special' ---
            normalize_header() {
              local s="${1,,}"                        # lowercase (bash 4+)
              s="${s//mega_ball/special}"
              s="${s//cash_ball/special}"
              s="${s//powerball/special}"
              echo "$s"
            }

            local h_norm r2_norm c_norm
            h_norm="$(normalize_header "$header")"
            r2_norm="$(normalize_header "$r2_header")"
            c_norm="$(normalize_header "$canon")"

            # If local header isn't canonical, trust canonical (future-proof)
            if [[ "$h_norm" != "$c_norm" ]]; then
              echo "WARNING: local header not canonical; rewriting to canonical."
              { echo "$canon"; tail -n +2 "$local_file"; } > "$local_file.tmp" && mv "$local_file.tmp" "$local_file"
              header="$canon"
              h_norm="$c_norm"
            fi

            # If R2 header differs only by synonyms/BOM/CRLF, rewrite it to canonical in-place
            if [[ -s "$r2_file" && "$r2_norm" != "$h_norm" ]]; then
              # If body looks like the same shape (6 commas), allow auto-repair; else bail.
              local r2_cols
              r2_cols="$(head -n1 "$r2_file" | tr -d '\r' | awk -F, '{print NF}')"
              if [[ "$r2_cols" -eq 7 ]]; then
                echo "R2 header differs but compatible; rewriting to canonical."
                { echo "$canon"; tail -n +2 "$r2_file"; } > "$r2_file.tmp" && mv "$r2_file.tmp" "$r2_file"
                r2_header="$canon"
                r2_norm="$c_norm"
              else
                echo "ERROR: Header mismatch for $rel (incompatible column count)."
                echo "R2:  $r2_header"
                echo "LOC: $header"
                exit 1
              fi
            fi

            # Final safety check
            if [[ "$r2_norm" != "$h_norm" ]]; then
              echo "ERROR: Header mismatch for $rel"
              echo "R2:  $r2_header"
              echo "LOC: $header"
              exit 1
            fi

            # Ensure R2 has a header line if it was empty
            [[ -s "$r2_file" ]] || echo "$header" > "$r2_file"

            # --- Merge (append-only, unique by date = col 1) ---
            # Keep rows sorted by date. Remove blank lines. De-dupe on draw_date.
            {
              echo "$header"
              (tail -n +2 "$r2_file"; tail -n +2 "$local_file") \
                | sed '/^[[:space:]]*$/d' \
                | awk -F, 'NR>1 { if (!seen[$1]++) print $0 }' \
                | sort
            } > "$merged"

            mv "$merged" "$local_file"
            echo "Post-merge $rel line count: $(($(wc -l < "$local_file") - 1)) rows"
          }

          merge_csv multi/powerball.csv
          merge_csv multi/megamillions.csv
          merge_csv ga/cash4life.csv
          merge_csv ga/fantasy5.csv


      - name: Show local CSVs (after merge, before upload)
        shell: bash
        run: |
          set -euo pipefail
          for f in \
            public/data/ga/fantasy5.csv \
            public/data/ga/cash4life.csv \
            public/data/multi/powerball.csv \
            public/data/multi/megamillions.csv
          do
            echo "---- $f ----"
            wc -l "$f" || true
            sed -n '1,5p' "$f" || true
            echo
          done

      # =========== UPLOADS via Wrangler v4 ===========

      - name: Upload merged CSVs to R2
        shell: bash
        run: |
          set -euo pipefail
          npx wrangler --version
          # Upload with cache headers
          npx wrangler r2 object put "$R2_BUCKET/ga/fantasy5.csv"       --file=public/data/ga/fantasy5.csv       --content-type=text/csv --cache-control=public,max-age=3600,must-revalidate --remote
          npx wrangler r2 object put "$R2_BUCKET/ga/cash4life.csv"      --file=public/data/ga/cash4life.csv      --content-type=text/csv --cache-control=public,max-age=3600,must-revalidate --remote
          npx wrangler r2 object put "$R2_BUCKET/multi/powerball.csv"   --file=public/data/multi/powerball.csv   --content-type=text/csv --cache-control=public,max-age=3600,must-revalidate --remote
          npx wrangler r2 object put "$R2_BUCKET/multi/megamillions.csv" --file=public/data/multi/megamillions.csv --content-type=text/csv --cache-control=public,max-age=3600,must-revalidate --remote

      - name: Verify R2 object (Fantasy5)
        run: |
          set -euo pipefail
          # Local line count
          LOCAL=$(wc -l < public/data/ga/fantasy5.csv)
          # Download and count from R2
          npx wrangler r2 object get "$R2_BUCKET/ga/fantasy5.csv" --pipe | tee /tmp/f5.remote.csv >/dev/null
          REMOTE=$(wc -l < /tmp/f5.remote.csv)
          echo "Fantasy5 lines: local=$LOCAL remote=$REMOTE"
          test "$REMOTE" -ge "$LOCAL" || { echo "ERROR: remote has fewer lines than local"; exit 1; }

      - name: Verify R2 object (Cash4Life)
        run: |
          set -euo pipefail
          # Local line count
          LOCAL=$(wc -l < public/data/ga/cash4life.csv)
          # Download and count from R2
          npx wrangler r2 object get "$R2_BUCKET/ga/cash4life.csv" --pipe | tee /tmp/f5.remote.csv >/dev/null
          REMOTE=$(wc -l < /tmp/f5.remote.csv)
          echo "Cash$Life lines: local=$LOCAL remote=$REMOTE"
          test "$REMOTE" -ge "$LOCAL" || { echo "ERROR: remote has fewer lines than local"; exit 1; }

      - name: Verify R2 object (Powerball)
        run: |
          set -euo pipefail
          # Local line count
          LOCAL=$(wc -l < public/data/multi/powerball.csv)
          # Download and count from R2
          npx wrangler r2 object get "$R2_BUCKET/multi/powerball.csv" --pipe | tee /tmp/f5.remote.csv >/dev/null
          REMOTE=$(wc -l < /tmp/f5.remote.csv)
          echo "Powerball lines: local=$LOCAL remote=$REMOTE"
          test "$REMOTE" -ge "$LOCAL" || { echo "ERROR: remote has fewer lines than local"; exit 1; }

      - name: Verify R2 object (Megamillions)
        run: |
          set -euo pipefail
          # Local line count
          LOCAL=$(wc -l < public/data/multi/megamillions.csv)
          # Download and count from R2
          npx wrangler r2 object get "$R2_BUCKET/multi/megamillions.csv" --pipe | tee /tmp/f5.remote.csv >/dev/null
          REMOTE=$(wc -l < /tmp/f5.remote.csv)
          echo "Megamillions lines: local=$LOCAL remote=$REMOTE"
          test "$REMOTE" -ge "$LOCAL" || { echo "ERROR: remote has fewer lines than local"; exit 1; }

      - name: Post-upload sanity (counts from R2)
        shell: bash
        run: |
          set -euo pipefail
          check() {
            local key="$1"
            local tmp
            tmp="$(mktemp)"
            npx wrangler r2 object get "$R2_BUCKET/$key" --pipe > "$tmp"
            echo "R2: $key -> total lines: $(wc -l < "$tmp")"
            echo "Head:"
            sed -n '1,5p' "$tmp"
            echo
          }
          check ga/fantasy5.csv
          check ga/cash4life.csv
          check multi/powerball.csv
          check multi/megamillions.csv

      # -------- Commit at the end (CSV-only, safe) --------
      - name: Commit CSV changes only (safe)
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git restore --worktree --staged package.json package-lock.json 2>/dev/null || true
          git add public/data/ga public/data/multi

          if git diff --cached --quiet; then
            echo "No CSV changes to commit."
            exit 0
          fi

          echo "Changes to commit:"
          git diff --cached --name-status

          git commit -m "chore: update CSVs"
          git push
